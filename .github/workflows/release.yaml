name: CI

on:
  push:
    tags:
    - v*

jobs:
  upload-artifacts:
    runs-on: ${{ matrix.os.long }}
    strategy:
      matrix:
        os:
        - long: ubuntu-latest
          short: linux
        - long: macOS-latest
          short: mac
        - long: windows-latest
          short: win
    steps:
    - uses: actions/checkout@v1
    - uses: actions-rs/toolchain@v1.0.5
      with:
        profile: minimal
    - run: cargo fetch --verbose
    - run: cargo build --release

    - name: Archive-posix
      if: matrix.os.short != 'win'
      working-directory: target/release
      run: |
        VERSION="${{git.ref}}"
        ARCHIVE="git-cleanup-${{matrix.os.short}}-$VERSION.tgz"
        echo "::set-env name=VERSION::$VERSION"
        echo "::set-env name=ARCHIVE::$ARCHIVE"

        rm -rf artifacts
        mkdir -p artifacts/git-cleanup
        cp 'git-cleanup' artifacts/git-cleanup/
        echo '${{github.sha}} ${{github.ref}}' | tee artifacts/git-cleanup/git-ref
        shasum -a 256 'git-cleanup' | tee artifacts/git-cleanup/sha256sums

        cd artifacts
        tar cvzf "$ARCHIVE" git-cleanup
    - name: Archive-win
      if: matrix.os.short == 'win'
      working-directory: target/release
      run: |
        $VERSION="${{git.ref}}"
        $ARCHIVE="git-cleanup-${{matrix.os.short}}-$VERSION.zip"
        echo "::set-env name=VERSION::$VERSION"
        echo "::set-env name=ARCHIVE::$ARCHIVE"

        if (Test-Path "artifacts") {
          rm -Recurse -Force artifacts
        }
        mkdir artifacts/git-cleanup
        cp 'git-cleanup.exe' artifacts/git-cleanup/
        echo '${{github.sha}} ${{github.ref}}' | tee artifacts/git-cleanup/git-ref
        $(Get-FileHash 'git-cleanup.exe').Hash | tee artifacts/git-cleanup/sha256sums

        cd artifacts
        Compress-Archive -Path git-cleanup -DestinationPath "$ARCHIVE"

    - uses: actions/upload-artifact@v1
      with:
        name: git-cleanup-${{matrix.os.short}}-${{env.VERSION}}
        path: target/release/artifacts/${{env.ARCHIVE}}

  release:
    needs:
    - upload-artifacts
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: git-cleanup-linux-${{github.ref}}
    - uses: actions/download-artifact@v1
      with:
        name: git-cleanup-mac-${{github.ref}}
    - uses: actions/download-artifact@v1
      with:
        name: git-cleanup-win-${{github.ref}}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: true

    - name: Upload Release Asset - linux
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./git-cleanup-linux-${{github.ref}}.tgz
        asset_name: git-cleanup-linux-${{github.ref}}.tgz
        asset_content_type: application/gzip

    - name: Upload Release Asset - mac
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./git-cleanup-mac-${{github.ref}}.tgz
        asset_name: git-cleanup-mac-${{github.ref}}.tgz
        asset_content_type: application/zip

    - name: Upload Release Asset - win
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./git-cleanup-win-${{github.ref}}.zip
        asset_name: git-cleanup-win-${{github.ref}}.zip
        asset_content_type: application/zip
