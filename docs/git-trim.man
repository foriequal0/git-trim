GIT-TRIM(1)                                    General Commands Manual                                    GIT-TRIM(1)

NAME
       git-trim - Automatically trims your tracking branches whose upstream branches are merged or stray.

SYNOPSIS
       git-trim [FLAGS] [OPTIONS]

FLAGS
       -h, --help
              Prints help information

       --no-update
              Do not update remotes [config: trim.update]

       --no-confirm
              Do not ask confirm [config: trim.confirm]

       --no-detach
              Do not detach when HEAD is about to be deleted [config: trim.detach]

       --dry-run
              Do not delete branches, show what branches will be deleted

OPTIONS
       -b, --bases=bases
              Comma separated multiple names of branches. All the other branches are compared with the upstream
              branches of those branches. [default: branches that tracks `git symbolic-ref refs/remotes/*/HEAD`]
              [config: trim.bases]

              The default value is a branch that tracks `git symbolic-ref refs/remotes/*/HEAD`. They might not be
              reflected correctly when the HEAD branch of your remote repository is changed. You can see the changed
              HEAD branch name with `git remote show <remote>` and apply it to your local repository with `git remote
              set-head <remote> --auto`.

       -p, --protected=protected
              Comma separated multiple glob patterns (e.g. `release-*`, `feature/*`) of branches that should never be
              deleted. [config: trim.protected]

       --update-interval=update-interval
              Prevents too frequent updates. Seconds between updates in seconds. 0 to disable. [default: 5] [config:
              trim.updateInterval]

       -s, --scan=scan
              Comma separated values of `<scan range>[:<remote name>]`. Scan range is one of the `all, local,
              remote`. `:<remote name>` is necessary to a `<scan range>` when the scan range implies `remote`. You
              can use `*` as `<remote name>` to scan branches from all remotes. [default : `local`] [config:
              trim.scan]

              When `local` is specified, scans tracking local branches, tracking its upstreams, and all non-tracking
              local branches. When `remote:<remote name>` is specified, scans non-upstream remote tracking branches
              from `<remote name>`. `all` implies `local,remote`.

              You might usually want to use one of these: `--scan local` alone or `--scan all:origin` with `--delete
              merged:origin,remote:origin` option.

       -d, --delete=delete
              Comma separated values of `<delete range>[:<remote name>]`. Delete range is one of the `merged,
              merged-local, merged-remote, stray, diverged, local, remote`. `:<remote name>` is necessary to a
              `<delete range>` when the delete range implies `merged-remote`, `diverged` or `remote`. You can use `*`
              as `<remote name>` to delete a range of branches from all remotes. [default : `merged:origin`] [config:
              trim.delete]

              `merged` implies `merged-local,merged-remote`.

              When `local` is specified, deletes non-tracking merged local branches. When `remote` is specified,
              deletes non-upstream merged remote tracking branches.

EXIT STATUS
       0      Successful program execution.

       1      Unsuccessful program execution.

       101    The program panicked.

                                                                                                          GIT-TRIM(1)
